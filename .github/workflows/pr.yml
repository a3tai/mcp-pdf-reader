name: Pull Request Validation

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: read
  security-events: write

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set up Go
        uses: actions/setup-go@v5.5.0
        with:
          go-version: "1.24"

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.64.8
          args: --timeout=5m

      - name: Install gofumpt
        run: go install mvdan.cc/gofumpt@latest

      - name: Format check
        run: |
          if [ "$(gofumpt -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofumpt -l .
            echo "Please run 'make fmt' to format your code with gofumpt."
            exit 1
          fi

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.23", "1.24"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5.5.0
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: make test

      - name: Run tests with coverage
        run: make test-coverage

      - name: Upload coverage reports to Codecov
        if: matrix.go-version == '1.24'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ["1.24"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5.5.0
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Install dependencies
        run: go mod download

      - name: Build binary
        run: make build

      - name: Test binary execution (Unix)
        if: runner.os != 'Windows'
        run: |
          ./mcp-pdf-reader --help
          timeout 5s ./mcp-pdf-reader -mode=server -pdfdir=. || true

      - name: Test binary execution (Windows)
        if: runner.os == 'Windows'
        run: |
          # List files to debug
          Get-ChildItem -Name "mcp-pdf-reader*"

          # The Makefile creates 'mcp-pdf-reader' without .exe extension
          # We need to rename it for Windows compatibility
          if (Test-Path "mcp-pdf-reader") {
            Move-Item "mcp-pdf-reader" "mcp-pdf-reader.exe"
          }

          if (Test-Path "mcp-pdf-reader.exe") {
            .\mcp-pdf-reader.exe --help
            # Windows timeout equivalent - run for 5 seconds then kill
            $process = Start-Process -FilePath ".\mcp-pdf-reader.exe" -ArgumentList "-mode=server","-pdfdir=." -PassThru -WindowStyle Hidden
            Start-Sleep 5
            Stop-Process $process.Id -Force -ErrorAction SilentlyContinue
          } else {
            Write-Error "mcp-pdf-reader binary not found"
            Get-ChildItem
            exit 1
          }

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set up Go
        uses: actions/setup-go@v5.5.0
        with:
          go-version: "1.24"

      - name: Install dependencies
        run: go mod download

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: "-no-fail -fmt sarif -out results.sarif -conf .gosec.json ./..."

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
        if: always()

  validate:
    name: Validate
    runs-on: ubuntu-latest
    needs: [lint, test, build, security]
    steps:
      - name: All checks passed
        run: echo "All validation checks passed successfully!"
