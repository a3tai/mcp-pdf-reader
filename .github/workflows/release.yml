name: Release

on:
  push:
    tags:
      - "v*.*.*"

env:
  GO_VERSION: "1.24"

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Release version: ${VERSION}"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set up Go
        uses: actions/setup-go@v5.5.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: make test

      - name: Run security scan
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: "-no-fail ./..."

  build:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    needs: [prepare, test]
    strategy:
      matrix:
        include:
          # Linux
          - goos: linux
            goarch: amd64
            suffix: ""
          - goos: linux
            goarch: arm64
            suffix: ""
          # macOS
          - goos: darwin
            goarch: amd64
            suffix: ""
          - goos: darwin
            goarch: arm64
            suffix: ""
          # Windows
          - goos: windows
            goarch: amd64
            suffix: ".exe"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set up Go
        uses: actions/setup-go@v5.5.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          BINARY_NAME="mcp-pdf-reader-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}"
          echo "Building ${BINARY_NAME} for ${{ matrix.goos }}/${{ matrix.goarch }}"

          go build \
            -ldflags "-X main.version=${{ needs.prepare.outputs.version }} -s -w" \
            -o "${BINARY_NAME}" \
            ./cmd/mcp-pdf-reader

          # Verify the binary was created
          ls -la "${BINARY_NAME}"

          # Create checksums
          if command -v sha256sum &> /dev/null; then
            sha256sum "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
          else
            shasum -a 256 "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
          fi

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: mcp-pdf-reader-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            mcp-pdf-reader-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}
            mcp-pdf-reader-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}.sha256

  package:
    name: Create Release Packages
    runs-on: ubuntu-latest
    needs: [prepare, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create release packages
        run: |
          mkdir -p release-packages

          # Create packages for each platform
          for dir in ./artifacts/*/; do
            platform=$(basename "$dir")
            echo "Creating package for ${platform}"

            # Extract OS and ARCH from artifact name
            os_arch=${platform#mcp-pdf-reader-}

            # Create directory structure
            pkg_dir="mcp-pdf-reader-${{ needs.prepare.outputs.version }}-${os_arch}"
            mkdir -p "${pkg_dir}"

            # Copy binary and checksum
            cp "${dir}"/* "${pkg_dir}/"

            # Copy documentation
            cp README.md "${pkg_dir}/"
            cp LICENSE "${pkg_dir}/"

            # Create installation script for Unix systems
            if [[ "${os_arch}" != *"windows"* ]]; then
              cat > "${pkg_dir}/install.sh" << 'EOF'
          #!/bin/bash
          set -e

          BINARY_NAME="mcp-pdf-reader"
          INSTALL_DIR="${HOME}/.local/bin"

          echo "Installing ${BINARY_NAME} to ${INSTALL_DIR}..."

          # Create install directory if it doesn't exist
          mkdir -p "${INSTALL_DIR}"

          # Find the binary (it will have the platform suffix)
          BINARY_FILE=$(find . -name "mcp-pdf-reader-*" -type f ! -name "*.sha256" | head -1)

          if [ -z "${BINARY_FILE}" ]; then
            echo "Error: Binary not found"
            exit 1
          fi

          # Copy and rename binary
          cp "${BINARY_FILE}" "${INSTALL_DIR}/${BINARY_NAME}"
          chmod +x "${INSTALL_DIR}/${BINARY_NAME}"

          echo "Installation complete!"
          echo "Make sure ${INSTALL_DIR} is in your PATH:"
          echo "  export PATH=\"${INSTALL_DIR}:\$PATH\""
          echo ""
          echo "You can now use: ${BINARY_NAME} -pdfdir=/path/to/pdfs"
          EOF
              chmod +x "${pkg_dir}/install.sh"
            fi

            # Create Windows installation script
            if [[ "${os_arch}" == *"windows"* ]]; then
              cat > "${pkg_dir}/install.bat" << 'EOF'
          @echo off
          setlocal

          set BINARY_NAME=mcp-pdf-reader.exe
          set INSTALL_DIR=%USERPROFILE%\bin

          echo Installing %BINARY_NAME% to %INSTALL_DIR%...

          if not exist "%INSTALL_DIR%" mkdir "%INSTALL_DIR%"

          for %%f in (mcp-pdf-reader-*.exe) do (
            copy "%%f" "%INSTALL_DIR%\%BINARY_NAME%"
            goto :copied
          )

          echo Error: Binary not found
          exit /b 1

          :copied
          echo Installation complete!
          echo Make sure %INSTALL_DIR% is in your PATH
          echo You can now use: %BINARY_NAME% -pdfdir=C:\path\to\pdfs
          EOF
            fi

            # Create archive
            if [[ "${os_arch}" == *"windows"* ]]; then
              # Create zip for Windows
              cd "${pkg_dir}" && zip -r "../release-packages/${pkg_dir}.zip" . && cd ..
            else
              # Create tar.gz for Unix systems
              tar -czf "release-packages/${pkg_dir}.tar.gz" "${pkg_dir}"
            fi

            # Clean up
            rm -rf "${pkg_dir}"
          done

          # List created packages
          echo "Created release packages:"
          ls -la release-packages/

      - name: Upload release packages
        uses: actions/upload-artifact@v4
        with:
          name: release-packages
          path: release-packages/

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare, build, package]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Download release packages
        uses: actions/download-artifact@v4
        with:
          name: release-packages
          path: ./release-packages

      - name: Download binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << EOF
          # MCP PDF Reader ${{ needs.prepare.outputs.tag }}

          A robust Model Context Protocol (MCP) server for reading and analyzing PDF documents.

          ## 🚀 Features

          - **📄 PDF Processing**: Read, validate, and extract text from PDF documents
          - **🔍 Smart Search**: Find PDF files with fuzzy search capabilities
          - **📊 Statistics**: Get comprehensive directory and file statistics
          - **🔄 Dual Mode Support**: stdio (MCP standard) and server (HTTP) modes
          - **🎯 Editor Integration**: Works with Zed, Cursor, Claude Desktop, VS Code extensions, and more

          ## 📦 Installation

          ### Quick Install
          \`\`\`bash
          go install github.com/a3tai/mcp-pdf-reader/cmd/mcp-pdf-reader@${{ needs.prepare.outputs.tag }}
          \`\`\`

          ### Download Binaries
          Download the appropriate binary for your platform from the assets below, then:

          **Linux/macOS:**
          \`\`\`bash
          tar -xzf mcp-pdf-reader-${{ needs.prepare.outputs.version }}-linux-amd64.tar.gz
          cd mcp-pdf-reader-${{ needs.prepare.outputs.version }}-linux-amd64
          ./install.sh
          \`\`\`

          **Windows:**
          1. Download and extract the zip file
          2. Run \`install.bat\` as Administrator

          ## 🎯 Usage

          \`\`\`bash
          # Basic usage (stdio mode for MCP clients)
          mcp-pdf-reader -pdfdir=/path/to/pdfs

          # Server mode for testing/debugging
          mcp-pdf-reader -mode=server -pdfdir=./docs
          \`\`\`

          ## 📋 Supported Platforms

          - **Linux**: amd64, arm64
          - **macOS**: amd64 (Intel), arm64 (Apple Silicon)
          - **Windows**: amd64

          ## 🔧 What's New

          - Initial release of MCP PDF Reader
          - Cross-platform binaries for all major platforms
          - Comprehensive editor integration support
          - Production-ready with extensive testing

          ---

          **Full Changelog**: https://github.com/a3tai/mcp-pdf-reader/commits/${{ needs.prepare.outputs.tag }}
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.tag }}
          name: MCP PDF Reader ${{ needs.prepare.outputs.tag }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            ./release-packages/*
            ./artifacts/*/*
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update latest release info
        run: |
          echo "🎉 Release ${{ needs.prepare.outputs.tag }} created successfully!"
          echo "📦 Download: https://github.com/a3tai/mcp-pdf-reader/releases/tag/${{ needs.prepare.outputs.tag }}"
          echo "🚀 Install: go install github.com/a3tai/mcp-pdf-reader/cmd/mcp-pdf-reader@${{ needs.prepare.outputs.tag }}"
