# Task ID: 27
# Title: Debug and Fix Form Field Detection in pdf_extract_forms Tool
# Status: done
# Dependencies: 12, 14
# Priority: high
# Description: Investigate and fix the pdf_extract_forms tool's failure to detect form fields in valid PDF forms (tax documents, W-2s, 1099s), addressing the root cause of the tool returning 0 form elements and restoring form processing functionality.
# Details:
Debug and fix the form field detection issue in the pdf_extract_forms tool by systematically investigating the parsing pipeline:

```go
// cmd/pdf_extract_forms/main.go
// Add comprehensive debugging and logging
func main() {
    // Enable verbose logging for form detection
    log.SetLevel(log.DebugLevel)
    
    // Add diagnostic mode flag
    diagnosticMode := flag.Bool("diagnostic", false, "Enable diagnostic output for form detection")
    flag.Parse()
    
    if *diagnosticMode {
        enableFormDiagnostics()
    }
}

// internal/pdf/forms/debug.go
package forms

type FormDebugger struct {
    writer io.Writer
    level  DebugLevel
}

func (fd *FormDebugger) TraceAcroFormLookup(catalog map[string]interface{}) {
    fd.log("Searching for AcroForm in catalog...")
    if acroForm, exists := catalog["AcroForm"]; exists {
        fd.log("AcroForm found: %+v", acroForm)
    } else {
        fd.log("WARNING: No AcroForm entry in catalog")
        fd.log("Catalog keys: %v", keys(catalog))
    }
}

func (fd *FormDebugger) TraceFieldParsing(field map[string]interface{}) {
    fd.log("Parsing field: FT=%v, T=%v, V=%v", 
        field["FT"], field["T"], field["V"])
    
    // Check for widget annotations
    if kids, hasKids := field["Kids"]; hasKids {
        fd.log("Field has %d children", len(kids))
    }
}

// internal/pdf/wrapper/form_detection_fix.go
func (p *PDFCPUBackend) ExtractFormFields() ([]FormField, error) {
    // Fix 1: Handle indirect references properly
    catalog := p.ctx.Catalog
    
    // Check both direct and indirect AcroForm references
    acroFormObj := catalog["AcroForm"]
    if indRef, isIndirect := acroFormObj.(model.IndirectRef); isIndirect {
        // Dereference indirect object
        acroFormObj, _ = p.ctx.Dereference(indRef)
    }
    
    // Fix 2: Handle XFA forms (common in tax documents)
    if xfa := p.checkForXFAForms(acroFormObj); xfa != nil {
        return p.parseXFAForms(xfa)
    }
    
    // Fix 3: Recursive field search
    fields := p.recursiveFieldSearch(acroFormObj)
    
    // Fix 4: Check for fields in page annotations
    if len(fields) == 0 {
        fields = p.searchPageAnnotations()
    }
    
    return fields, nil
}

func (p *PDFCPUBackend) checkForXFAForms(acroForm map[string]interface{}) interface{} {
    // Many tax forms use XFA (XML Forms Architecture)
    if xfa, exists := acroForm["XFA"]; exists {
        log.Debug("XFA forms detected")
        return xfa
    }
    return nil
}

func (p *PDFCPUBackend) searchPageAnnotations() []FormField {
    // Some PDFs store form fields as page annotations
    var fields []FormField
    
    for pageNum := 1; pageNum <= p.ctx.PageCount; pageNum++ {
        page, _ := p.ctx.Page(pageNum)
        if annots, exists := page.Dict["Annots"]; exists {
            // Parse widget annotations
            fields = append(fields, p.parseWidgetAnnotations(annots)...)
        }
    }
    
    return fields
}

// Fix for specific tax document formats
func (p *PDFCPUBackend) handleTaxDocumentQuirks() {
    // W-2 and 1099 forms often use non-standard field structures
    // Implement specific handlers for common tax form formats
    
    // Check for flattened forms
    if p.isFlattened() {
        log.Warn("Form appears to be flattened - fields may not be extractable")
    }
}
```

Key fixes to implement:

1. **Indirect Reference Resolution**: Properly handle indirect object references in the AcroForm dictionary
2. **XFA Form Support**: Add support for XFA (XML Forms Architecture) used in many tax documents
3. **Page Annotation Search**: Search for form fields stored as page annotations
4. **Recursive Field Discovery**: Implement deep recursive search for nested field structures
5. **Tax Document Quirks**: Handle specific formatting quirks common in W-2s and 1099s
6. **Flattened Form Detection**: Detect and warn about flattened forms where fields are rendered as static content

# Test Strategy:
Comprehensive testing strategy to verify form field detection fixes:

1. **Tax Document Test Suite**:
   - Collect sample W-2, 1099, and other tax forms from multiple sources
   - Test with forms from major tax software (TurboTax, H&R Block, etc.)
   - Verify detection of all expected fields (SSN, wages, tax withheld, etc.)
   - Create regression test suite with known problematic documents

2. **Diagnostic Output Verification**:
   - Run tool with --diagnostic flag on failing documents
   - Verify detailed logging shows AcroForm lookup process
   - Check that indirect references are properly resolved
   - Confirm XFA detection when present

3. **Field Detection Tests**:
   - Test with forms containing indirect AcroForm references
   - Test with XFA-based forms (common in government documents)
   - Test with forms using page annotations for fields
   - Test with nested field hierarchies
   - Test with flattened vs. interactive forms

4. **Integration Testing**:
   - Run fixed tool against production tax documents
   - Compare field counts with Adobe Acrobat's form field list
   - Verify all field types are properly detected (text, checkbox, signature)
   - Test field value extraction for pre-filled forms

5. **Performance Regression**:
   - Ensure fixes don't significantly impact processing speed
   - Test with large forms (50+ fields)
   - Verify memory usage remains reasonable

6. **Error Handling**:
   - Test with corrupted form dictionaries
   - Test with partially valid forms
   - Verify graceful degradation and helpful error messages

# Subtasks:
## 1. Implement Comprehensive Debugging Infrastructure [done]
### Dependencies: None
### Description: Create a robust debugging framework with diagnostic mode, trace logging, and detailed form detection analysis capabilities to identify why form fields are not being detected
### Details:
Create internal/pdf/forms/debug.go with FormDebugger struct implementing TraceAcroFormLookup, TraceFieldParsing, and other diagnostic methods. Add -diagnostic flag to main.go that enables verbose logging. Implement structured logging that traces catalog inspection, AcroForm lookup, field enumeration, and any parsing failures. Include helper functions to dump PDF structure and identify missing or malformed form elements.

## 2. Fix Indirect Reference Resolution in AcroForm Lookup [done]
### Dependencies: 27.1
### Description: Implement proper handling of indirect object references when accessing the AcroForm dictionary, as tax documents often use indirect references that current implementation may not resolve correctly
### Details:
In ExtractFormFields method, check if catalog['AcroForm'] returns an IndirectRef type. If so, use ctx.Dereference() to resolve the actual object. Implement error handling for failed dereferences. Add logging to track reference resolution. Handle nested indirect references that may occur in complex PDF structures. Ensure the resolved object is properly type-checked before processing.

## 3. Add XFA Form Support for Tax Documents [done]
### Dependencies: 27.2
### Description: Implement parsing support for XFA (XML Forms Architecture) forms commonly used in W-2s, 1099s, and other tax documents, which use XML-based form definitions instead of traditional AcroForm fields
### Details:
Create checkForXFAForms method to detect XFA presence in AcroForm dictionary. Implement parseXFAForms to extract XML data from XFA streams and parse form field definitions. Handle both XFA-only and hybrid (XFA+AcroForm) documents. Extract field names, types, and values from XML structure. Map XFA field types to standard FormField structure. Add specific handling for common tax form XFA schemas.

## 4. Implement Page Annotation and Recursive Field Search [done]
### Dependencies: 27.2
### Description: Add fallback mechanisms to search for form fields in page annotations and implement deep recursive search for nested field structures that may not be directly referenced in AcroForm
### Details:
Implement searchPageAnnotations to iterate through all pages and check Annots array for Widget type annotations. Create parseWidgetAnnotations to extract form field data from annotation dictionaries. Implement recursiveFieldSearch to handle fields with Kids arrays and nested field hierarchies. Add support for field inheritance where child fields inherit properties from parents. Handle both terminal fields and non-terminal field nodes in the hierarchy.

## 5. Handle Tax Document Quirks and Flattened Forms [done]
### Dependencies: 27.3, 27.4
### Description: Implement specific handlers for common tax document formatting quirks and add detection for flattened forms where interactive fields have been converted to static content
### Details:
Create handleTaxDocumentQuirks method to detect and handle W-2/1099 specific patterns. Implement isFlattened detection by checking for absence of form fields but presence of form-like content patterns. Add heuristics to identify common tax form layouts even when fields are missing. Implement warning system for flattened forms. Add special handling for forms that use non-standard field naming conventions common in tax software. Create mapping tables for common tax form field variations.

